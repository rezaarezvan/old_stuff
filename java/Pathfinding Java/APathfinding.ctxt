#BlueJ class context
comment0.target=APathfinding
comment1.params=size
comment1.target=APathfinding(int)
comment10.params=
comment10.target=Node\ getStart()
comment11.params=
comment11.target=Node\ getEnd()
comment12.params=
comment12.target=Node\ getPar()
comment13.params=
comment13.target=boolean\ isNoPath()
comment14.params=
comment14.target=boolean\ isDiagonal()
comment15.params=
comment15.target=boolean\ isTrig()
comment16.params=d
comment16.target=void\ setDiagonal(boolean)
comment17.params=t
comment17.target=void\ setTrig(boolean)
comment18.params=s
comment18.target=void\ setSize(int)
comment19.params=parent
comment19.target=void\ findPath(Node)
comment2.params=frame\ size
comment2.target=APathfinding(Frame,\ int)
comment20.params=possibleX\ possibleY\ openNode\ parent
comment20.target=void\ calculateNodeValues(int,\ int,\ Node,\ Node)
comment21.params=
comment21.target=void\ connectPath()
comment22.params=node
comment22.target=void\ addBorder(Node)
comment23.params=node
comment23.target=void\ addOpen(Node)
comment24.params=node
comment24.target=void\ addClosed(Node)
comment25.params=node
comment25.target=void\ addPath(Node)
comment26.params=location
comment26.target=void\ removePath(int)
comment27.params=location
comment27.target=void\ removeBorder(int)
comment28.params=location
comment28.target=void\ removeOpen(int)
comment29.params=node
comment29.target=void\ removeOpen(Node)
comment3.params=frame\ size\ start\ end
comment3.target=APathfinding(Frame,\ int,\ Node,\ Node)
comment30.params=location
comment30.target=void\ removeClosed(int)
comment31.params=node
comment31.target=boolean\ checkBorderDuplicate(Node)
comment32.params=node
comment32.target=boolean\ checkOpenDuplicate(Node)
comment33.params=node
comment33.target=boolean\ checkClosedDuplicate(Node)
comment34.params=xSearch\ ySearch
comment34.target=int\ searchBorder(int,\ int)
comment35.params=xSearch\ ySearch
comment35.target=int\ searchClosed(int,\ int)
comment36.params=xSearch\ ySearch
comment36.target=int\ searchOpen(int,\ int)
comment37.params=list
comment37.target=void\ reverse(java.util.ArrayList)
comment38.params=
comment38.target=Node\ lowestFCost()
comment39.params=
comment39.target=java.util.ArrayList\ getBorderList()
comment4.params=s\ e
comment4.target=void\ start(Node,\ Node)
comment40.params=
comment40.target=java.util.ArrayList\ getOpenList()
comment41.params=location
comment41.target=Node\ getOpen(int)
comment42.params=
comment42.target=java.util.ArrayList\ getClosedList()
comment43.params=
comment43.target=java.util.ArrayList\ getPathList()
comment44.params=
comment44.target=long\ getRunTime()
comment45.params=
comment45.target=void\ reset()
comment46.params=x\ y
comment46.target=Node\ getOpenNode(int,\ int)
comment47.params=
comment47.target=void\ printBorderList()
comment48.params=
comment48.target=void\ printOpenList()
comment49.params=
comment49.target=void\ printPathList()
comment5.params=s\ e
comment5.target=void\ setup(Node,\ Node)
comment6.params=s
comment6.target=void\ setStart(Node)
comment7.params=e
comment7.target=void\ setEnd(Node)
comment8.params=
comment8.target=boolean\ isRunning()
comment9.params=
comment9.target=boolean\ isComplete()
numComments=50
